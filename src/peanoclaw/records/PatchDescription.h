#ifndef _PEANOCLAW_RECORDS_PATCHDESCRIPTION_H
#define _PEANOCLAW_RECORDS_PATCHDESCRIPTION_H

#include "peano/utils/Globals.h"
#include "tarch/compiler/CompilerSpecificSettings.h"
#include "peano/utils/PeanoOptimisations.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peanoclaw {
   namespace records {
      class PatchDescription;
      class PatchDescriptionPacked;
   }
}

#if defined(Parallel)
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 12-04-2013 09:18
    *
    * @date   11/08/2013 11:57
    */
   class peanoclaw::records::PatchDescription { 
      
      public:
         
         typedef peanoclaw::records::PatchDescriptionPacked Packed;
         
         struct PersistentRecords {
            bool _isReferenced;
            tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
            int _rank;
            tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
            int _ghostLayerWidth;
            int _level;
            bool _isVirtual;
            bool _isRemote;
            tarch::la::Vector<DIMENSIONS,double> _position;
            tarch::la::Vector<DIMENSIONS,double> _size;
            double _time;
            double _timestepSize;
            int _skipGridIterations;
            double _demandedMeshWidth;
            int _cellDescriptionIndex;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
            
            /**
             * Generated
             */
             bool getIsReferenced() const ;
            
            /**
             * Generated
             */
             void setIsReferenced(const bool& isReferenced) ;
            
             tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
            
             void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
            
            /**
             * Generated
             */
             int getRank() const ;
            
            /**
             * Generated
             */
             void setRank(const int& rank) ;
            
             tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
            
             void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
            
            /**
             * Generated
             */
             int getGhostLayerWidth() const ;
            
            /**
             * Generated
             */
             void setGhostLayerWidth(const int& ghostLayerWidth) ;
            
            /**
             * Generated
             */
             int getLevel() const ;
            
            /**
             * Generated
             */
             void setLevel(const int& level) ;
            
            /**
             * Generated
             */
             bool getIsVirtual() const ;
            
            /**
             * Generated
             */
             void setIsVirtual(const bool& isVirtual) ;
            
            /**
             * Generated
             */
             bool getIsRemote() const ;
            
            /**
             * Generated
             */
             void setIsRemote(const bool& isRemote) ;
            
             tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
            
             void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
            
             tarch::la::Vector<DIMENSIONS,double> getSize() const ;
            
             void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
            
            /**
             * Generated
             */
             double getTime() const ;
            
            /**
             * Generated
             */
             void setTime(const double& time) ;
            
            /**
             * Generated
             */
             double getTimestepSize() const ;
            
            /**
             * Generated
             */
             void setTimestepSize(const double& timestepSize) ;
            
            /**
             * Generated
             */
             int getSkipGridIterations() const ;
            
            /**
             * Generated
             */
             void setSkipGridIterations(const int& skipGridIterations) ;
            
            /**
             * Generated
             */
             double getDemandedMeshWidth() const ;
            
            /**
             * Generated
             */
             void setDemandedMeshWidth(const double& demandedMeshWidth) ;
            
            /**
             * Generated
             */
             int getCellDescriptionIndex() const ;
            
            /**
             * Generated
             */
             void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         PatchDescription();
         
         /**
          * Generated
          */
         PatchDescription(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         PatchDescription(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
         
         /**
          * Generated
          */
         ~PatchDescription();
         
         /**
          * Generated
          */
          bool getIsReferenced() const ;
         
         /**
          * Generated
          */
          void setIsReferenced(const bool& isReferenced) ;
         
          tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
         
          void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
         
          int getAdjacentRanks(int elementIndex) const ;
         
          void setAdjacentRanks(int elementIndex, const int& adjacentRanks) ;
         
         /**
          * Generated
          */
          int getRank() const ;
         
         /**
          * Generated
          */
          void setRank(const int& rank) ;
         
          tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
         
          void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
         
          int getSubdivisionFactor(int elementIndex) const ;
         
          void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
         
         /**
          * Generated
          */
          int getGhostLayerWidth() const ;
         
         /**
          * Generated
          */
          void setGhostLayerWidth(const int& ghostLayerWidth) ;
         
         /**
          * Generated
          */
          int getLevel() const ;
         
         /**
          * Generated
          */
          void setLevel(const int& level) ;
         
         /**
          * Generated
          */
          bool getIsVirtual() const ;
         
         /**
          * Generated
          */
          void setIsVirtual(const bool& isVirtual) ;
         
         /**
          * Generated
          */
          bool getIsRemote() const ;
         
         /**
          * Generated
          */
          void setIsRemote(const bool& isRemote) ;
         
          tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
         
          void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
         
          double getPosition(int elementIndex) const ;
         
          void setPosition(int elementIndex, const double& position) ;
         
          tarch::la::Vector<DIMENSIONS,double> getSize() const ;
         
          void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
         
          double getSize(int elementIndex) const ;
         
          void setSize(int elementIndex, const double& size) ;
         
         /**
          * Generated
          */
          double getTime() const ;
         
         /**
          * Generated
          */
          void setTime(const double& time) ;
         
         /**
          * Generated
          */
          double getTimestepSize() const ;
         
         /**
          * Generated
          */
          void setTimestepSize(const double& timestepSize) ;
         
         /**
          * Generated
          */
          int getSkipGridIterations() const ;
         
         /**
          * Generated
          */
          void setSkipGridIterations(const int& skipGridIterations) ;
         
         /**
          * Generated
          */
          double getDemandedMeshWidth() const ;
         
         /**
          * Generated
          */
          void setDemandedMeshWidth(const double& demandedMeshWidth) ;
         
         /**
          * Generated
          */
          int getCellDescriptionIndex() const ;
         
         /**
          * Generated
          */
          void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         PatchDescriptionPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            #endif
               
            };
            
            /**
             * @author This class is generated by DaStGen
             * 		   DataStructureGenerator (DaStGen)
             * 		   2007-2009 Wolfgang Eckhardt
             * 		   2012      Tobias Weinzierl
             *
             * 		   build date: 12-04-2013 09:18
             *
             * @date   11/08/2013 11:57
             */
            class peanoclaw::records::PatchDescriptionPacked { 
               
               public:
                  
                  struct PersistentRecords {
                     bool _isReferenced;
                     tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
                     int _rank;
                     tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                     int _ghostLayerWidth;
                     int _level;
                     bool _isVirtual;
                     bool _isRemote;
                     tarch::la::Vector<DIMENSIONS,double> _position;
                     tarch::la::Vector<DIMENSIONS,double> _size;
                     double _time;
                     double _timestepSize;
                     int _skipGridIterations;
                     double _demandedMeshWidth;
                     int _cellDescriptionIndex;
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                     
                     /**
                      * Generated
                      */
                      bool getIsReferenced() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsReferenced(const bool& isReferenced) ;
                     
                      tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
                     
                      void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
                     
                     /**
                      * Generated
                      */
                      int getRank() const ;
                     
                     /**
                      * Generated
                      */
                      void setRank(const int& rank) ;
                     
                      tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                     
                      void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                     
                     /**
                      * Generated
                      */
                      int getGhostLayerWidth() const ;
                     
                     /**
                      * Generated
                      */
                      void setGhostLayerWidth(const int& ghostLayerWidth) ;
                     
                     /**
                      * Generated
                      */
                      int getLevel() const ;
                     
                     /**
                      * Generated
                      */
                      void setLevel(const int& level) ;
                     
                     /**
                      * Generated
                      */
                      bool getIsVirtual() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsVirtual(const bool& isVirtual) ;
                     
                     /**
                      * Generated
                      */
                      bool getIsRemote() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsRemote(const bool& isRemote) ;
                     
                      tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                     
                      void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                     
                      tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                     
                      void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                     
                     /**
                      * Generated
                      */
                      double getTime() const ;
                     
                     /**
                      * Generated
                      */
                      void setTime(const double& time) ;
                     
                     /**
                      * Generated
                      */
                      double getTimestepSize() const ;
                     
                     /**
                      * Generated
                      */
                      void setTimestepSize(const double& timestepSize) ;
                     
                     /**
                      * Generated
                      */
                      int getSkipGridIterations() const ;
                     
                     /**
                      * Generated
                      */
                      void setSkipGridIterations(const int& skipGridIterations) ;
                     
                     /**
                      * Generated
                      */
                      double getDemandedMeshWidth() const ;
                     
                     /**
                      * Generated
                      */
                      void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                     
                     /**
                      * Generated
                      */
                      int getCellDescriptionIndex() const ;
                     
                     /**
                      * Generated
                      */
                      void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  PatchDescriptionPacked();
                  
                  /**
                   * Generated
                   */
                  PatchDescriptionPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  PatchDescriptionPacked(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const bool& isRemote, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                  
                  /**
                   * Generated
                   */
                  ~PatchDescriptionPacked();
                  
                  /**
                   * Generated
                   */
                   bool getIsReferenced() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsReferenced(const bool& isReferenced) ;
                  
                   tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
                  
                   void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
                  
                   int getAdjacentRanks(int elementIndex) const ;
                  
                   void setAdjacentRanks(int elementIndex, const int& adjacentRanks) ;
                  
                  /**
                   * Generated
                   */
                   int getRank() const ;
                  
                  /**
                   * Generated
                   */
                   void setRank(const int& rank) ;
                  
                   tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                  
                   void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                  
                   int getSubdivisionFactor(int elementIndex) const ;
                  
                   void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
                  
                  /**
                   * Generated
                   */
                   int getGhostLayerWidth() const ;
                  
                  /**
                   * Generated
                   */
                   void setGhostLayerWidth(const int& ghostLayerWidth) ;
                  
                  /**
                   * Generated
                   */
                   int getLevel() const ;
                  
                  /**
                   * Generated
                   */
                   void setLevel(const int& level) ;
                  
                  /**
                   * Generated
                   */
                   bool getIsVirtual() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsVirtual(const bool& isVirtual) ;
                  
                  /**
                   * Generated
                   */
                   bool getIsRemote() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsRemote(const bool& isRemote) ;
                  
                   tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                  
                   void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                  
                   double getPosition(int elementIndex) const ;
                  
                   void setPosition(int elementIndex, const double& position) ;
                  
                   tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                  
                   void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                  
                   double getSize(int elementIndex) const ;
                  
                   void setSize(int elementIndex, const double& size) ;
                  
                  /**
                   * Generated
                   */
                   double getTime() const ;
                  
                  /**
                   * Generated
                   */
                   void setTime(const double& time) ;
                  
                  /**
                   * Generated
                   */
                   double getTimestepSize() const ;
                  
                  /**
                   * Generated
                   */
                   void setTimestepSize(const double& timestepSize) ;
                  
                  /**
                   * Generated
                   */
                   int getSkipGridIterations() const ;
                  
                  /**
                   * Generated
                   */
                   void setSkipGridIterations(const int& skipGridIterations) ;
                  
                  /**
                   * Generated
                   */
                   double getDemandedMeshWidth() const ;
                  
                  /**
                   * Generated
                   */
                   void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                  
                  /**
                   * Generated
                   */
                   int getCellDescriptionIndex() const ;
                  
                  /**
                   * Generated
                   */
                   void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  PatchDescription convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      * There are two variants: Datatype identifies only those attributes marked with
                      * parallelise. FullDatatype instead identifies the whole record with all fields.
                      */
                     static MPI_Datatype Datatype;
                     static MPI_Datatype FullDatatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     #endif
                        
                     };
                     
                     
                  #elif !defined(Parallel)
                     /**
                      * @author This class is generated by DaStGen
                      * 		   DataStructureGenerator (DaStGen)
                      * 		   2007-2009 Wolfgang Eckhardt
                      * 		   2012      Tobias Weinzierl
                      *
                      * 		   build date: 12-04-2013 09:18
                      *
                      * @date   11/08/2013 11:57
                      */
                     class peanoclaw::records::PatchDescription { 
                        
                        public:
                           
                           typedef peanoclaw::records::PatchDescriptionPacked Packed;
                           
                           struct PersistentRecords {
                              bool _isReferenced;
                              tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
                              int _rank;
                              tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                              int _ghostLayerWidth;
                              int _level;
                              bool _isVirtual;
                              tarch::la::Vector<DIMENSIONS,double> _position;
                              tarch::la::Vector<DIMENSIONS,double> _size;
                              double _time;
                              double _timestepSize;
                              int _skipGridIterations;
                              double _demandedMeshWidth;
                              int _cellDescriptionIndex;
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                              
                              /**
                               * Generated
                               */
                               bool getIsReferenced() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsReferenced(const bool& isReferenced) ;
                              
                               tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
                              
                               void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
                              
                              /**
                               * Generated
                               */
                               int getRank() const ;
                              
                              /**
                               * Generated
                               */
                               void setRank(const int& rank) ;
                              
                               tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                              
                               void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                              
                              /**
                               * Generated
                               */
                               int getGhostLayerWidth() const ;
                              
                              /**
                               * Generated
                               */
                               void setGhostLayerWidth(const int& ghostLayerWidth) ;
                              
                              /**
                               * Generated
                               */
                               int getLevel() const ;
                              
                              /**
                               * Generated
                               */
                               void setLevel(const int& level) ;
                              
                              /**
                               * Generated
                               */
                               bool getIsVirtual() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsVirtual(const bool& isVirtual) ;
                              
                               tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                              
                               void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                              
                               tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                              
                               void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                              
                              /**
                               * Generated
                               */
                               double getTime() const ;
                              
                              /**
                               * Generated
                               */
                               void setTime(const double& time) ;
                              
                              /**
                               * Generated
                               */
                               double getTimestepSize() const ;
                              
                              /**
                               * Generated
                               */
                               void setTimestepSize(const double& timestepSize) ;
                              
                              /**
                               * Generated
                               */
                               int getSkipGridIterations() const ;
                              
                              /**
                               * Generated
                               */
                               void setSkipGridIterations(const int& skipGridIterations) ;
                              
                              /**
                               * Generated
                               */
                               double getDemandedMeshWidth() const ;
                              
                              /**
                               * Generated
                               */
                               void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                              
                              /**
                               * Generated
                               */
                               int getCellDescriptionIndex() const ;
                              
                              /**
                               * Generated
                               */
                               void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           
                        public:
                           /**
                            * Generated
                            */
                           PatchDescription();
                           
                           /**
                            * Generated
                            */
                           PatchDescription(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           PatchDescription(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                           
                           /**
                            * Generated
                            */
                           ~PatchDescription();
                           
                           /**
                            * Generated
                            */
                            bool getIsReferenced() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsReferenced(const bool& isReferenced) ;
                           
                            tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
                           
                            void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
                           
                            int getAdjacentRanks(int elementIndex) const ;
                           
                            void setAdjacentRanks(int elementIndex, const int& adjacentRanks) ;
                           
                           /**
                            * Generated
                            */
                            int getRank() const ;
                           
                           /**
                            * Generated
                            */
                            void setRank(const int& rank) ;
                           
                            tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                           
                            void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                           
                            int getSubdivisionFactor(int elementIndex) const ;
                           
                            void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
                           
                           /**
                            * Generated
                            */
                            int getGhostLayerWidth() const ;
                           
                           /**
                            * Generated
                            */
                            void setGhostLayerWidth(const int& ghostLayerWidth) ;
                           
                           /**
                            * Generated
                            */
                            int getLevel() const ;
                           
                           /**
                            * Generated
                            */
                            void setLevel(const int& level) ;
                           
                           /**
                            * Generated
                            */
                            bool getIsVirtual() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsVirtual(const bool& isVirtual) ;
                           
                            tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                           
                            void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                           
                            double getPosition(int elementIndex) const ;
                           
                            void setPosition(int elementIndex, const double& position) ;
                           
                            tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                           
                            void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                           
                            double getSize(int elementIndex) const ;
                           
                            void setSize(int elementIndex, const double& size) ;
                           
                           /**
                            * Generated
                            */
                            double getTime() const ;
                           
                           /**
                            * Generated
                            */
                            void setTime(const double& time) ;
                           
                           /**
                            * Generated
                            */
                            double getTimestepSize() const ;
                           
                           /**
                            * Generated
                            */
                            void setTimestepSize(const double& timestepSize) ;
                           
                           /**
                            * Generated
                            */
                            int getSkipGridIterations() const ;
                           
                           /**
                            * Generated
                            */
                            void setSkipGridIterations(const int& skipGridIterations) ;
                           
                           /**
                            * Generated
                            */
                            double getDemandedMeshWidth() const ;
                           
                           /**
                            * Generated
                            */
                            void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                           
                           /**
                            * Generated
                            */
                            int getCellDescriptionIndex() const ;
                           
                           /**
                            * Generated
                            */
                            void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           PatchDescriptionPacked convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               * There are two variants: Datatype identifies only those attributes marked with
                               * parallelise. FullDatatype instead identifies the whole record with all fields.
                               */
                              static MPI_Datatype Datatype;
                              static MPI_Datatype FullDatatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              #endif
                                 
                              };
                              
                              /**
                               * @author This class is generated by DaStGen
                               * 		   DataStructureGenerator (DaStGen)
                               * 		   2007-2009 Wolfgang Eckhardt
                               * 		   2012      Tobias Weinzierl
                               *
                               * 		   build date: 12-04-2013 09:18
                               *
                               * @date   11/08/2013 11:57
                               */
                              class peanoclaw::records::PatchDescriptionPacked { 
                                 
                                 public:
                                    
                                    struct PersistentRecords {
                                       bool _isReferenced;
                                       tarch::la::Vector<THREE_POWER_D,int> _adjacentRanks;
                                       int _rank;
                                       tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                                       int _ghostLayerWidth;
                                       int _level;
                                       bool _isVirtual;
                                       tarch::la::Vector<DIMENSIONS,double> _position;
                                       tarch::la::Vector<DIMENSIONS,double> _size;
                                       double _time;
                                       double _timestepSize;
                                       int _skipGridIterations;
                                       double _demandedMeshWidth;
                                       int _cellDescriptionIndex;
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords();
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                                       
                                       /**
                                        * Generated
                                        */
                                        bool getIsReferenced() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setIsReferenced(const bool& isReferenced) ;
                                       
                                        tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
                                       
                                        void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getRank() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setRank(const int& rank) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                                       
                                        void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getGhostLayerWidth() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setGhostLayerWidth(const int& ghostLayerWidth) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getLevel() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setLevel(const int& level) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        bool getIsVirtual() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setIsVirtual(const bool& isVirtual) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                                       
                                        void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                                       
                                        void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getTime() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setTime(const double& time) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getTimestepSize() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setTimestepSize(const double& timestepSize) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getSkipGridIterations() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setSkipGridIterations(const int& skipGridIterations) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getDemandedMeshWidth() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getCellDescriptionIndex() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                                       
                                       
                                    };
                                    
                                 private: 
                                    PersistentRecords _persistentRecords;
                                    
                                 public:
                                    /**
                                     * Generated
                                     */
                                    PatchDescriptionPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                    PatchDescriptionPacked(const PersistentRecords& persistentRecords);
                                    
                                    /**
                                     * Generated
                                     */
                                    PatchDescriptionPacked(const bool& isReferenced, const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks, const int& rank, const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& level, const bool& isVirtual, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const int& skipGridIterations, const double& demandedMeshWidth, const int& cellDescriptionIndex);
                                    
                                    /**
                                     * Generated
                                     */
                                    ~PatchDescriptionPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getIsReferenced() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setIsReferenced(const bool& isReferenced) ;
                                    
                                     tarch::la::Vector<THREE_POWER_D,int> getAdjacentRanks() const ;
                                    
                                     void setAdjacentRanks(const tarch::la::Vector<THREE_POWER_D,int>& adjacentRanks) ;
                                    
                                     int getAdjacentRanks(int elementIndex) const ;
                                    
                                     void setAdjacentRanks(int elementIndex, const int& adjacentRanks) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getRank() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setRank(const int& rank) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                                    
                                     void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                                    
                                     int getSubdivisionFactor(int elementIndex) const ;
                                    
                                     void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getGhostLayerWidth() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setGhostLayerWidth(const int& ghostLayerWidth) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getLevel() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setLevel(const int& level) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getIsVirtual() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setIsVirtual(const bool& isVirtual) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                                    
                                     void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                                    
                                     double getPosition(int elementIndex) const ;
                                    
                                     void setPosition(int elementIndex, const double& position) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                                    
                                     void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                                    
                                     double getSize(int elementIndex) const ;
                                    
                                     void setSize(int elementIndex, const double& size) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getTime() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setTime(const double& time) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getTimestepSize() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setTimestepSize(const double& timestepSize) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getSkipGridIterations() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setSkipGridIterations(const int& skipGridIterations) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getDemandedMeshWidth() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getCellDescriptionIndex() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                                    
                                    /**
                                     * Generated
                                     */
                                    std::string toString() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void toString(std::ostream& out) const;
                                    
                                    
                                    PersistentRecords getPersistentRecords() const;
                                    /**
                                     * Generated
                                     */
                                    PatchDescription convert() const;
                                    
                                    
                                 #ifdef Parallel
                                    protected:
                                       static tarch::logging::Log _log;
                                       
                                    public:
                                       
                                       /**
                                        * Global that represents the mpi datatype.
                                        * There are two variants: Datatype identifies only those attributes marked with
                                        * parallelise. FullDatatype instead identifies the whole record with all fields.
                                        */
                                       static MPI_Datatype Datatype;
                                       static MPI_Datatype FullDatatype;
                                       
                                       /**
                                        * Initializes the data type for the mpi operations. Has to be called
                                        * before the very first send or receive operation is called.
                                        */
                                       static void initDatatype();
                                       
                                       static void shutdownDatatype();
                                       
                                       void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       #endif
                                          
                                       };
                                       
                                       
                                    
                                 #endif
                                 
                                 #endif
                                 
