#ifndef _PEANOCLAW_RECORDS_CELLDESCRIPTION_H
#define _PEANOCLAW_RECORDS_CELLDESCRIPTION_H

#include "peano/utils/Globals.h"
#include "tarch/compiler/CompilerSpecificSettings.h"
#include "peano/utils/PeanoOptimisations.h"
#ifdef Parallel
	#include "tarch/parallel/Node.h"
#endif
#ifdef Parallel
	#include <mpi.h>
#endif
#include "tarch/logging/Log.h"
#include "tarch/la/Vector.h"
#include <bitset>
#include <complex>
#include <string>
#include <iostream>

namespace peanoclaw {
   namespace records {
      class CellDescription;
      class CellDescriptionPacked;
   }
}

#if defined(Parallel)
   /**
    * @author This class is generated by DaStGen
    * 		   DataStructureGenerator (DaStGen)
    * 		   2007-2009 Wolfgang Eckhardt
    * 		   2012      Tobias Weinzierl
    *
    * 		   build date: 12-04-2013 09:18
    *
    * @date   31/07/2013 16:41
    */
   class peanoclaw::records::CellDescription { 
      
      public:
         
         typedef peanoclaw::records::CellDescriptionPacked Packed;
         
         struct PersistentRecords {
            tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
            int _ghostLayerWidth;
            int _unknownsPerSubcell;
            int _auxiliarFieldsPerSubcell;
            int _level;
            bool _isVirtual;
            int _numberOfPatchStateUpdates;
            bool _isRemote;
            bool _currentStateWasSend;
            bool _isPaddingSubgrid;
            tarch::la::Vector<DIMENSIONS,double> _position;
            tarch::la::Vector<DIMENSIONS,double> _size;
            double _time;
            double _timestepSize;
            double _maximumFineGridTime;
            double _minimumFineGridTimestep;
            bool _synchronizeFineGrids;
            bool _willCoarsen;
            double _minimalNeighborTimeConstraint;
            int _constrainingNeighborIndex;
            double _minimalLeafNeighborTimeConstraint;
            double _minimalNeighborTime;
            double _maximalNeighborTimestep;
            double _estimatedNextTimestepSize;
            int _skipGridIterations;
            int _ageInGridIterations;
            double _demandedMeshWidth;
            tarch::la::Vector<DIMENSIONS,double> _restrictionLowerBounds;
            tarch::la::Vector<DIMENSIONS,double> _restrictionUpperBounds;
            int _cellDescriptionIndex;
            int _uOldIndex;
            int _uNewIndex;
            int _auxIndex;
            /**
             * Generated
             */
            PersistentRecords();
            
            /**
             * Generated
             */
            PersistentRecords(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const bool& isRemote, const bool& currentStateWasSend, const bool& isPaddingSubgrid, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
            
             tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
            
             void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
            
            /**
             * Generated
             */
             int getGhostLayerWidth() const ;
            
            /**
             * Generated
             */
             void setGhostLayerWidth(const int& ghostLayerWidth) ;
            
            /**
             * Generated
             */
             int getUnknownsPerSubcell() const ;
            
            /**
             * Generated
             */
             void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
            
            /**
             * Generated
             */
             int getAuxiliarFieldsPerSubcell() const ;
            
            /**
             * Generated
             */
             void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
            
            /**
             * Generated
             */
             int getLevel() const ;
            
            /**
             * Generated
             */
             void setLevel(const int& level) ;
            
            /**
             * Generated
             */
             bool getIsVirtual() const ;
            
            /**
             * Generated
             */
             void setIsVirtual(const bool& isVirtual) ;
            
            /**
             * Generated
             */
             int getNumberOfPatchStateUpdates() const ;
            
            /**
             * Generated
             */
             void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
            
            /**
             * Generated
             */
             bool getIsRemote() const ;
            
            /**
             * Generated
             */
             void setIsRemote(const bool& isRemote) ;
            
            /**
             * Generated
             */
             bool getCurrentStateWasSend() const ;
            
            /**
             * Generated
             */
             void setCurrentStateWasSend(const bool& currentStateWasSend) ;
            
            /**
             * Generated
             */
             bool getIsPaddingSubgrid() const ;
            
            /**
             * Generated
             */
             void setIsPaddingSubgrid(const bool& isPaddingSubgrid) ;
            
             tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
            
             void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
            
             tarch::la::Vector<DIMENSIONS,double> getSize() const ;
            
             void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
            
            /**
             * Generated
             */
             double getTime() const ;
            
            /**
             * Generated
             */
             void setTime(const double& time) ;
            
            /**
             * Generated
             */
             double getTimestepSize() const ;
            
            /**
             * Generated
             */
             void setTimestepSize(const double& timestepSize) ;
            
            /**
             * Generated
             */
             double getMaximumFineGridTime() const ;
            
            /**
             * Generated
             */
             void setMaximumFineGridTime(const double& maximumFineGridTime) ;
            
            /**
             * Generated
             */
             double getMinimumFineGridTimestep() const ;
            
            /**
             * Generated
             */
             void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
            
            /**
             * Generated
             */
             bool getSynchronizeFineGrids() const ;
            
            /**
             * Generated
             */
             void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
            
            /**
             * Generated
             */
             bool getWillCoarsen() const ;
            
            /**
             * Generated
             */
             void setWillCoarsen(const bool& willCoarsen) ;
            
            /**
             * Generated
             */
             double getMinimalNeighborTimeConstraint() const ;
            
            /**
             * Generated
             */
             void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
            
            /**
             * Generated
             */
             int getConstrainingNeighborIndex() const ;
            
            /**
             * Generated
             */
             void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
            
            /**
             * Generated
             */
             double getMinimalLeafNeighborTimeConstraint() const ;
            
            /**
             * Generated
             */
             void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
            
            /**
             * Generated
             */
             double getMinimalNeighborTime() const ;
            
            /**
             * Generated
             */
             void setMinimalNeighborTime(const double& minimalNeighborTime) ;
            
            /**
             * Generated
             */
             double getMaximalNeighborTimestep() const ;
            
            /**
             * Generated
             */
             void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
            
            /**
             * Generated
             */
             double getEstimatedNextTimestepSize() const ;
            
            /**
             * Generated
             */
             void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
            
            /**
             * Generated
             */
             int getSkipGridIterations() const ;
            
            /**
             * Generated
             */
             void setSkipGridIterations(const int& skipGridIterations) ;
            
            /**
             * Generated
             */
             int getAgeInGridIterations() const ;
            
            /**
             * Generated
             */
             void setAgeInGridIterations(const int& ageInGridIterations) ;
            
            /**
             * Generated
             */
             double getDemandedMeshWidth() const ;
            
            /**
             * Generated
             */
             void setDemandedMeshWidth(const double& demandedMeshWidth) ;
            
             tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
            
             void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
            
             tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
            
             void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
            
            /**
             * Generated
             */
             int getCellDescriptionIndex() const ;
            
            /**
             * Generated
             */
             void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
            
            /**
             * Generated
             */
             int getUOldIndex() const ;
            
            /**
             * Generated
             */
             void setUOldIndex(const int& uOldIndex) ;
            
            /**
             * Generated
             */
             int getUNewIndex() const ;
            
            /**
             * Generated
             */
             void setUNewIndex(const int& uNewIndex) ;
            
            /**
             * Generated
             */
             int getAuxIndex() const ;
            
            /**
             * Generated
             */
             void setAuxIndex(const int& auxIndex) ;
            
            
         };
         
      private: 
         PersistentRecords _persistentRecords;
         
      public:
         /**
          * Generated
          */
         CellDescription();
         
         /**
          * Generated
          */
         CellDescription(const PersistentRecords& persistentRecords);
         
         /**
          * Generated
          */
         CellDescription(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const bool& isRemote, const bool& currentStateWasSend, const bool& isPaddingSubgrid, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
         
         /**
          * Generated
          */
         ~CellDescription();
         
          tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
         
          void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
         
          int getSubdivisionFactor(int elementIndex) const ;
         
          void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
         
         /**
          * Generated
          */
          int getGhostLayerWidth() const ;
         
         /**
          * Generated
          */
          void setGhostLayerWidth(const int& ghostLayerWidth) ;
         
         /**
          * Generated
          */
          int getUnknownsPerSubcell() const ;
         
         /**
          * Generated
          */
          void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
         
         /**
          * Generated
          */
          int getAuxiliarFieldsPerSubcell() const ;
         
         /**
          * Generated
          */
          void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
         
         /**
          * Generated
          */
          int getLevel() const ;
         
         /**
          * Generated
          */
          void setLevel(const int& level) ;
         
         /**
          * Generated
          */
          bool getIsVirtual() const ;
         
         /**
          * Generated
          */
          void setIsVirtual(const bool& isVirtual) ;
         
         /**
          * Generated
          */
          int getNumberOfPatchStateUpdates() const ;
         
         /**
          * Generated
          */
          void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
         
         /**
          * Generated
          */
          bool getIsRemote() const ;
         
         /**
          * Generated
          */
          void setIsRemote(const bool& isRemote) ;
         
         /**
          * Generated
          */
          bool getCurrentStateWasSend() const ;
         
         /**
          * Generated
          */
          void setCurrentStateWasSend(const bool& currentStateWasSend) ;
         
         /**
          * Generated
          */
          bool getIsPaddingSubgrid() const ;
         
         /**
          * Generated
          */
          void setIsPaddingSubgrid(const bool& isPaddingSubgrid) ;
         
          tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
         
          void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
         
          double getPosition(int elementIndex) const ;
         
          void setPosition(int elementIndex, const double& position) ;
         
          tarch::la::Vector<DIMENSIONS,double> getSize() const ;
         
          void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
         
          double getSize(int elementIndex) const ;
         
          void setSize(int elementIndex, const double& size) ;
         
         /**
          * Generated
          */
          double getTime() const ;
         
         /**
          * Generated
          */
          void setTime(const double& time) ;
         
         /**
          * Generated
          */
          double getTimestepSize() const ;
         
         /**
          * Generated
          */
          void setTimestepSize(const double& timestepSize) ;
         
         /**
          * Generated
          */
          double getMaximumFineGridTime() const ;
         
         /**
          * Generated
          */
          void setMaximumFineGridTime(const double& maximumFineGridTime) ;
         
         /**
          * Generated
          */
          double getMinimumFineGridTimestep() const ;
         
         /**
          * Generated
          */
          void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
         
         /**
          * Generated
          */
          bool getSynchronizeFineGrids() const ;
         
         /**
          * Generated
          */
          void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
         
         /**
          * Generated
          */
          bool getWillCoarsen() const ;
         
         /**
          * Generated
          */
          void setWillCoarsen(const bool& willCoarsen) ;
         
         /**
          * Generated
          */
          double getMinimalNeighborTimeConstraint() const ;
         
         /**
          * Generated
          */
          void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
         
         /**
          * Generated
          */
          int getConstrainingNeighborIndex() const ;
         
         /**
          * Generated
          */
          void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
         
         /**
          * Generated
          */
          double getMinimalLeafNeighborTimeConstraint() const ;
         
         /**
          * Generated
          */
          void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
         
         /**
          * Generated
          */
          double getMinimalNeighborTime() const ;
         
         /**
          * Generated
          */
          void setMinimalNeighborTime(const double& minimalNeighborTime) ;
         
         /**
          * Generated
          */
          double getMaximalNeighborTimestep() const ;
         
         /**
          * Generated
          */
          void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
         
         /**
          * Generated
          */
          double getEstimatedNextTimestepSize() const ;
         
         /**
          * Generated
          */
          void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
         
         /**
          * Generated
          */
          int getSkipGridIterations() const ;
         
         /**
          * Generated
          */
          void setSkipGridIterations(const int& skipGridIterations) ;
         
         /**
          * Generated
          */
          int getAgeInGridIterations() const ;
         
         /**
          * Generated
          */
          void setAgeInGridIterations(const int& ageInGridIterations) ;
         
         /**
          * Generated
          */
          double getDemandedMeshWidth() const ;
         
         /**
          * Generated
          */
          void setDemandedMeshWidth(const double& demandedMeshWidth) ;
         
          tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
         
          void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
         
          double getRestrictionLowerBounds(int elementIndex) const ;
         
          void setRestrictionLowerBounds(int elementIndex, const double& restrictionLowerBounds) ;
         
          tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
         
          void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
         
          double getRestrictionUpperBounds(int elementIndex) const ;
         
          void setRestrictionUpperBounds(int elementIndex, const double& restrictionUpperBounds) ;
         
         /**
          * Generated
          */
          int getCellDescriptionIndex() const ;
         
         /**
          * Generated
          */
          void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
         
         /**
          * Generated
          */
          int getUOldIndex() const ;
         
         /**
          * Generated
          */
          void setUOldIndex(const int& uOldIndex) ;
         
         /**
          * Generated
          */
          int getUNewIndex() const ;
         
         /**
          * Generated
          */
          void setUNewIndex(const int& uNewIndex) ;
         
         /**
          * Generated
          */
          int getAuxIndex() const ;
         
         /**
          * Generated
          */
          void setAuxIndex(const int& auxIndex) ;
         
         /**
          * Generated
          */
         std::string toString() const;
         
         /**
          * Generated
          */
         void toString(std::ostream& out) const;
         
         
         PersistentRecords getPersistentRecords() const;
         /**
          * Generated
          */
         CellDescriptionPacked convert() const;
         
         
      #ifdef Parallel
         protected:
            static tarch::logging::Log _log;
            
         public:
            
            /**
             * Global that represents the mpi datatype.
             * There are two variants: Datatype identifies only those attributes marked with
             * parallelise. FullDatatype instead identifies the whole record with all fields.
             */
            static MPI_Datatype Datatype;
            static MPI_Datatype FullDatatype;
            
            /**
             * Initializes the data type for the mpi operations. Has to be called
             * before the very first send or receive operation is called.
             */
            static void initDatatype();
            
            static void shutdownDatatype();
            
            void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
            
            #endif
               
            };
            
            /**
             * @author This class is generated by DaStGen
             * 		   DataStructureGenerator (DaStGen)
             * 		   2007-2009 Wolfgang Eckhardt
             * 		   2012      Tobias Weinzierl
             *
             * 		   build date: 12-04-2013 09:18
             *
             * @date   31/07/2013 16:41
             */
            class peanoclaw::records::CellDescriptionPacked { 
               
               public:
                  
                  struct PersistentRecords {
                     tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                     int _ghostLayerWidth;
                     int _unknownsPerSubcell;
                     int _auxiliarFieldsPerSubcell;
                     int _level;
                     bool _isVirtual;
                     int _numberOfPatchStateUpdates;
                     bool _isRemote;
                     bool _currentStateWasSend;
                     bool _isPaddingSubgrid;
                     tarch::la::Vector<DIMENSIONS,double> _position;
                     tarch::la::Vector<DIMENSIONS,double> _size;
                     double _time;
                     double _timestepSize;
                     double _maximumFineGridTime;
                     double _minimumFineGridTimestep;
                     bool _synchronizeFineGrids;
                     bool _willCoarsen;
                     double _minimalNeighborTimeConstraint;
                     int _constrainingNeighborIndex;
                     double _minimalLeafNeighborTimeConstraint;
                     double _minimalNeighborTime;
                     double _maximalNeighborTimestep;
                     double _estimatedNextTimestepSize;
                     int _skipGridIterations;
                     int _ageInGridIterations;
                     double _demandedMeshWidth;
                     tarch::la::Vector<DIMENSIONS,double> _restrictionLowerBounds;
                     tarch::la::Vector<DIMENSIONS,double> _restrictionUpperBounds;
                     int _cellDescriptionIndex;
                     int _uOldIndex;
                     int _uNewIndex;
                     int _auxIndex;
                     /**
                      * Generated
                      */
                     PersistentRecords();
                     
                     /**
                      * Generated
                      */
                     PersistentRecords(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const bool& isRemote, const bool& currentStateWasSend, const bool& isPaddingSubgrid, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
                     
                      tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                     
                      void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                     
                     /**
                      * Generated
                      */
                      int getGhostLayerWidth() const ;
                     
                     /**
                      * Generated
                      */
                      void setGhostLayerWidth(const int& ghostLayerWidth) ;
                     
                     /**
                      * Generated
                      */
                      int getUnknownsPerSubcell() const ;
                     
                     /**
                      * Generated
                      */
                      void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
                     
                     /**
                      * Generated
                      */
                      int getAuxiliarFieldsPerSubcell() const ;
                     
                     /**
                      * Generated
                      */
                      void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
                     
                     /**
                      * Generated
                      */
                      int getLevel() const ;
                     
                     /**
                      * Generated
                      */
                      void setLevel(const int& level) ;
                     
                     /**
                      * Generated
                      */
                      bool getIsVirtual() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsVirtual(const bool& isVirtual) ;
                     
                     /**
                      * Generated
                      */
                      int getNumberOfPatchStateUpdates() const ;
                     
                     /**
                      * Generated
                      */
                      void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
                     
                     /**
                      * Generated
                      */
                      bool getIsRemote() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsRemote(const bool& isRemote) ;
                     
                     /**
                      * Generated
                      */
                      bool getCurrentStateWasSend() const ;
                     
                     /**
                      * Generated
                      */
                      void setCurrentStateWasSend(const bool& currentStateWasSend) ;
                     
                     /**
                      * Generated
                      */
                      bool getIsPaddingSubgrid() const ;
                     
                     /**
                      * Generated
                      */
                      void setIsPaddingSubgrid(const bool& isPaddingSubgrid) ;
                     
                      tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                     
                      void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                     
                      tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                     
                      void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                     
                     /**
                      * Generated
                      */
                      double getTime() const ;
                     
                     /**
                      * Generated
                      */
                      void setTime(const double& time) ;
                     
                     /**
                      * Generated
                      */
                      double getTimestepSize() const ;
                     
                     /**
                      * Generated
                      */
                      void setTimestepSize(const double& timestepSize) ;
                     
                     /**
                      * Generated
                      */
                      double getMaximumFineGridTime() const ;
                     
                     /**
                      * Generated
                      */
                      void setMaximumFineGridTime(const double& maximumFineGridTime) ;
                     
                     /**
                      * Generated
                      */
                      double getMinimumFineGridTimestep() const ;
                     
                     /**
                      * Generated
                      */
                      void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
                     
                     /**
                      * Generated
                      */
                      bool getSynchronizeFineGrids() const ;
                     
                     /**
                      * Generated
                      */
                      void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
                     
                     /**
                      * Generated
                      */
                      bool getWillCoarsen() const ;
                     
                     /**
                      * Generated
                      */
                      void setWillCoarsen(const bool& willCoarsen) ;
                     
                     /**
                      * Generated
                      */
                      double getMinimalNeighborTimeConstraint() const ;
                     
                     /**
                      * Generated
                      */
                      void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
                     
                     /**
                      * Generated
                      */
                      int getConstrainingNeighborIndex() const ;
                     
                     /**
                      * Generated
                      */
                      void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
                     
                     /**
                      * Generated
                      */
                      double getMinimalLeafNeighborTimeConstraint() const ;
                     
                     /**
                      * Generated
                      */
                      void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
                     
                     /**
                      * Generated
                      */
                      double getMinimalNeighborTime() const ;
                     
                     /**
                      * Generated
                      */
                      void setMinimalNeighborTime(const double& minimalNeighborTime) ;
                     
                     /**
                      * Generated
                      */
                      double getMaximalNeighborTimestep() const ;
                     
                     /**
                      * Generated
                      */
                      void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
                     
                     /**
                      * Generated
                      */
                      double getEstimatedNextTimestepSize() const ;
                     
                     /**
                      * Generated
                      */
                      void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
                     
                     /**
                      * Generated
                      */
                      int getSkipGridIterations() const ;
                     
                     /**
                      * Generated
                      */
                      void setSkipGridIterations(const int& skipGridIterations) ;
                     
                     /**
                      * Generated
                      */
                      int getAgeInGridIterations() const ;
                     
                     /**
                      * Generated
                      */
                      void setAgeInGridIterations(const int& ageInGridIterations) ;
                     
                     /**
                      * Generated
                      */
                      double getDemandedMeshWidth() const ;
                     
                     /**
                      * Generated
                      */
                      void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                     
                      tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
                     
                      void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
                     
                      tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
                     
                      void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
                     
                     /**
                      * Generated
                      */
                      int getCellDescriptionIndex() const ;
                     
                     /**
                      * Generated
                      */
                      void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                     
                     /**
                      * Generated
                      */
                      int getUOldIndex() const ;
                     
                     /**
                      * Generated
                      */
                      void setUOldIndex(const int& uOldIndex) ;
                     
                     /**
                      * Generated
                      */
                      int getUNewIndex() const ;
                     
                     /**
                      * Generated
                      */
                      void setUNewIndex(const int& uNewIndex) ;
                     
                     /**
                      * Generated
                      */
                      int getAuxIndex() const ;
                     
                     /**
                      * Generated
                      */
                      void setAuxIndex(const int& auxIndex) ;
                     
                     
                  };
                  
               private: 
                  PersistentRecords _persistentRecords;
                  
               public:
                  /**
                   * Generated
                   */
                  CellDescriptionPacked();
                  
                  /**
                   * Generated
                   */
                  CellDescriptionPacked(const PersistentRecords& persistentRecords);
                  
                  /**
                   * Generated
                   */
                  CellDescriptionPacked(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const bool& isRemote, const bool& currentStateWasSend, const bool& isPaddingSubgrid, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
                  
                  /**
                   * Generated
                   */
                  ~CellDescriptionPacked();
                  
                   tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                  
                   void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                  
                   int getSubdivisionFactor(int elementIndex) const ;
                  
                   void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
                  
                  /**
                   * Generated
                   */
                   int getGhostLayerWidth() const ;
                  
                  /**
                   * Generated
                   */
                   void setGhostLayerWidth(const int& ghostLayerWidth) ;
                  
                  /**
                   * Generated
                   */
                   int getUnknownsPerSubcell() const ;
                  
                  /**
                   * Generated
                   */
                   void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
                  
                  /**
                   * Generated
                   */
                   int getAuxiliarFieldsPerSubcell() const ;
                  
                  /**
                   * Generated
                   */
                   void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
                  
                  /**
                   * Generated
                   */
                   int getLevel() const ;
                  
                  /**
                   * Generated
                   */
                   void setLevel(const int& level) ;
                  
                  /**
                   * Generated
                   */
                   bool getIsVirtual() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsVirtual(const bool& isVirtual) ;
                  
                  /**
                   * Generated
                   */
                   int getNumberOfPatchStateUpdates() const ;
                  
                  /**
                   * Generated
                   */
                   void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
                  
                  /**
                   * Generated
                   */
                   bool getIsRemote() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsRemote(const bool& isRemote) ;
                  
                  /**
                   * Generated
                   */
                   bool getCurrentStateWasSend() const ;
                  
                  /**
                   * Generated
                   */
                   void setCurrentStateWasSend(const bool& currentStateWasSend) ;
                  
                  /**
                   * Generated
                   */
                   bool getIsPaddingSubgrid() const ;
                  
                  /**
                   * Generated
                   */
                   void setIsPaddingSubgrid(const bool& isPaddingSubgrid) ;
                  
                   tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                  
                   void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                  
                   double getPosition(int elementIndex) const ;
                  
                   void setPosition(int elementIndex, const double& position) ;
                  
                   tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                  
                   void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                  
                   double getSize(int elementIndex) const ;
                  
                   void setSize(int elementIndex, const double& size) ;
                  
                  /**
                   * Generated
                   */
                   double getTime() const ;
                  
                  /**
                   * Generated
                   */
                   void setTime(const double& time) ;
                  
                  /**
                   * Generated
                   */
                   double getTimestepSize() const ;
                  
                  /**
                   * Generated
                   */
                   void setTimestepSize(const double& timestepSize) ;
                  
                  /**
                   * Generated
                   */
                   double getMaximumFineGridTime() const ;
                  
                  /**
                   * Generated
                   */
                   void setMaximumFineGridTime(const double& maximumFineGridTime) ;
                  
                  /**
                   * Generated
                   */
                   double getMinimumFineGridTimestep() const ;
                  
                  /**
                   * Generated
                   */
                   void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
                  
                  /**
                   * Generated
                   */
                   bool getSynchronizeFineGrids() const ;
                  
                  /**
                   * Generated
                   */
                   void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
                  
                  /**
                   * Generated
                   */
                   bool getWillCoarsen() const ;
                  
                  /**
                   * Generated
                   */
                   void setWillCoarsen(const bool& willCoarsen) ;
                  
                  /**
                   * Generated
                   */
                   double getMinimalNeighborTimeConstraint() const ;
                  
                  /**
                   * Generated
                   */
                   void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
                  
                  /**
                   * Generated
                   */
                   int getConstrainingNeighborIndex() const ;
                  
                  /**
                   * Generated
                   */
                   void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
                  
                  /**
                   * Generated
                   */
                   double getMinimalLeafNeighborTimeConstraint() const ;
                  
                  /**
                   * Generated
                   */
                   void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
                  
                  /**
                   * Generated
                   */
                   double getMinimalNeighborTime() const ;
                  
                  /**
                   * Generated
                   */
                   void setMinimalNeighborTime(const double& minimalNeighborTime) ;
                  
                  /**
                   * Generated
                   */
                   double getMaximalNeighborTimestep() const ;
                  
                  /**
                   * Generated
                   */
                   void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
                  
                  /**
                   * Generated
                   */
                   double getEstimatedNextTimestepSize() const ;
                  
                  /**
                   * Generated
                   */
                   void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
                  
                  /**
                   * Generated
                   */
                   int getSkipGridIterations() const ;
                  
                  /**
                   * Generated
                   */
                   void setSkipGridIterations(const int& skipGridIterations) ;
                  
                  /**
                   * Generated
                   */
                   int getAgeInGridIterations() const ;
                  
                  /**
                   * Generated
                   */
                   void setAgeInGridIterations(const int& ageInGridIterations) ;
                  
                  /**
                   * Generated
                   */
                   double getDemandedMeshWidth() const ;
                  
                  /**
                   * Generated
                   */
                   void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                  
                   tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
                  
                   void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
                  
                   double getRestrictionLowerBounds(int elementIndex) const ;
                  
                   void setRestrictionLowerBounds(int elementIndex, const double& restrictionLowerBounds) ;
                  
                   tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
                  
                   void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
                  
                   double getRestrictionUpperBounds(int elementIndex) const ;
                  
                   void setRestrictionUpperBounds(int elementIndex, const double& restrictionUpperBounds) ;
                  
                  /**
                   * Generated
                   */
                   int getCellDescriptionIndex() const ;
                  
                  /**
                   * Generated
                   */
                   void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                  
                  /**
                   * Generated
                   */
                   int getUOldIndex() const ;
                  
                  /**
                   * Generated
                   */
                   void setUOldIndex(const int& uOldIndex) ;
                  
                  /**
                   * Generated
                   */
                   int getUNewIndex() const ;
                  
                  /**
                   * Generated
                   */
                   void setUNewIndex(const int& uNewIndex) ;
                  
                  /**
                   * Generated
                   */
                   int getAuxIndex() const ;
                  
                  /**
                   * Generated
                   */
                   void setAuxIndex(const int& auxIndex) ;
                  
                  /**
                   * Generated
                   */
                  std::string toString() const;
                  
                  /**
                   * Generated
                   */
                  void toString(std::ostream& out) const;
                  
                  
                  PersistentRecords getPersistentRecords() const;
                  /**
                   * Generated
                   */
                  CellDescription convert() const;
                  
                  
               #ifdef Parallel
                  protected:
                     static tarch::logging::Log _log;
                     
                  public:
                     
                     /**
                      * Global that represents the mpi datatype.
                      * There are two variants: Datatype identifies only those attributes marked with
                      * parallelise. FullDatatype instead identifies the whole record with all fields.
                      */
                     static MPI_Datatype Datatype;
                     static MPI_Datatype FullDatatype;
                     
                     /**
                      * Initializes the data type for the mpi operations. Has to be called
                      * before the very first send or receive operation is called.
                      */
                     static void initDatatype();
                     
                     static void shutdownDatatype();
                     
                     void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                     
                     #endif
                        
                     };
                     
                     
                  #elif !defined(Parallel)
                     /**
                      * @author This class is generated by DaStGen
                      * 		   DataStructureGenerator (DaStGen)
                      * 		   2007-2009 Wolfgang Eckhardt
                      * 		   2012      Tobias Weinzierl
                      *
                      * 		   build date: 12-04-2013 09:18
                      *
                      * @date   31/07/2013 16:41
                      */
                     class peanoclaw::records::CellDescription { 
                        
                        public:
                           
                           typedef peanoclaw::records::CellDescriptionPacked Packed;
                           
                           struct PersistentRecords {
                              tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                              int _ghostLayerWidth;
                              int _unknownsPerSubcell;
                              int _auxiliarFieldsPerSubcell;
                              int _level;
                              bool _isVirtual;
                              int _numberOfPatchStateUpdates;
                              tarch::la::Vector<DIMENSIONS,double> _position;
                              tarch::la::Vector<DIMENSIONS,double> _size;
                              double _time;
                              double _timestepSize;
                              double _maximumFineGridTime;
                              double _minimumFineGridTimestep;
                              bool _synchronizeFineGrids;
                              bool _willCoarsen;
                              double _minimalNeighborTimeConstraint;
                              int _constrainingNeighborIndex;
                              double _minimalLeafNeighborTimeConstraint;
                              double _minimalNeighborTime;
                              double _maximalNeighborTimestep;
                              double _estimatedNextTimestepSize;
                              int _skipGridIterations;
                              int _ageInGridIterations;
                              double _demandedMeshWidth;
                              tarch::la::Vector<DIMENSIONS,double> _restrictionLowerBounds;
                              tarch::la::Vector<DIMENSIONS,double> _restrictionUpperBounds;
                              int _cellDescriptionIndex;
                              int _uOldIndex;
                              int _uNewIndex;
                              int _auxIndex;
                              /**
                               * Generated
                               */
                              PersistentRecords();
                              
                              /**
                               * Generated
                               */
                              PersistentRecords(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
                              
                               tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                              
                               void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                              
                              /**
                               * Generated
                               */
                               int getGhostLayerWidth() const ;
                              
                              /**
                               * Generated
                               */
                               void setGhostLayerWidth(const int& ghostLayerWidth) ;
                              
                              /**
                               * Generated
                               */
                               int getUnknownsPerSubcell() const ;
                              
                              /**
                               * Generated
                               */
                               void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
                              
                              /**
                               * Generated
                               */
                               int getAuxiliarFieldsPerSubcell() const ;
                              
                              /**
                               * Generated
                               */
                               void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
                              
                              /**
                               * Generated
                               */
                               int getLevel() const ;
                              
                              /**
                               * Generated
                               */
                               void setLevel(const int& level) ;
                              
                              /**
                               * Generated
                               */
                               bool getIsVirtual() const ;
                              
                              /**
                               * Generated
                               */
                               void setIsVirtual(const bool& isVirtual) ;
                              
                              /**
                               * Generated
                               */
                               int getNumberOfPatchStateUpdates() const ;
                              
                              /**
                               * Generated
                               */
                               void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
                              
                               tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                              
                               void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                              
                               tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                              
                               void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                              
                              /**
                               * Generated
                               */
                               double getTime() const ;
                              
                              /**
                               * Generated
                               */
                               void setTime(const double& time) ;
                              
                              /**
                               * Generated
                               */
                               double getTimestepSize() const ;
                              
                              /**
                               * Generated
                               */
                               void setTimestepSize(const double& timestepSize) ;
                              
                              /**
                               * Generated
                               */
                               double getMaximumFineGridTime() const ;
                              
                              /**
                               * Generated
                               */
                               void setMaximumFineGridTime(const double& maximumFineGridTime) ;
                              
                              /**
                               * Generated
                               */
                               double getMinimumFineGridTimestep() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
                              
                              /**
                               * Generated
                               */
                               bool getSynchronizeFineGrids() const ;
                              
                              /**
                               * Generated
                               */
                               void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
                              
                              /**
                               * Generated
                               */
                               bool getWillCoarsen() const ;
                              
                              /**
                               * Generated
                               */
                               void setWillCoarsen(const bool& willCoarsen) ;
                              
                              /**
                               * Generated
                               */
                               double getMinimalNeighborTimeConstraint() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
                              
                              /**
                               * Generated
                               */
                               int getConstrainingNeighborIndex() const ;
                              
                              /**
                               * Generated
                               */
                               void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
                              
                              /**
                               * Generated
                               */
                               double getMinimalLeafNeighborTimeConstraint() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
                              
                              /**
                               * Generated
                               */
                               double getMinimalNeighborTime() const ;
                              
                              /**
                               * Generated
                               */
                               void setMinimalNeighborTime(const double& minimalNeighborTime) ;
                              
                              /**
                               * Generated
                               */
                               double getMaximalNeighborTimestep() const ;
                              
                              /**
                               * Generated
                               */
                               void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
                              
                              /**
                               * Generated
                               */
                               double getEstimatedNextTimestepSize() const ;
                              
                              /**
                               * Generated
                               */
                               void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
                              
                              /**
                               * Generated
                               */
                               int getSkipGridIterations() const ;
                              
                              /**
                               * Generated
                               */
                               void setSkipGridIterations(const int& skipGridIterations) ;
                              
                              /**
                               * Generated
                               */
                               int getAgeInGridIterations() const ;
                              
                              /**
                               * Generated
                               */
                               void setAgeInGridIterations(const int& ageInGridIterations) ;
                              
                              /**
                               * Generated
                               */
                               double getDemandedMeshWidth() const ;
                              
                              /**
                               * Generated
                               */
                               void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                              
                               tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
                              
                               void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
                              
                               tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
                              
                               void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
                              
                              /**
                               * Generated
                               */
                               int getCellDescriptionIndex() const ;
                              
                              /**
                               * Generated
                               */
                               void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                              
                              /**
                               * Generated
                               */
                               int getUOldIndex() const ;
                              
                              /**
                               * Generated
                               */
                               void setUOldIndex(const int& uOldIndex) ;
                              
                              /**
                               * Generated
                               */
                               int getUNewIndex() const ;
                              
                              /**
                               * Generated
                               */
                               void setUNewIndex(const int& uNewIndex) ;
                              
                              /**
                               * Generated
                               */
                               int getAuxIndex() const ;
                              
                              /**
                               * Generated
                               */
                               void setAuxIndex(const int& auxIndex) ;
                              
                              
                           };
                           
                        private: 
                           PersistentRecords _persistentRecords;
                           
                        public:
                           /**
                            * Generated
                            */
                           CellDescription();
                           
                           /**
                            * Generated
                            */
                           CellDescription(const PersistentRecords& persistentRecords);
                           
                           /**
                            * Generated
                            */
                           CellDescription(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
                           
                           /**
                            * Generated
                            */
                           ~CellDescription();
                           
                            tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                           
                            void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                           
                            int getSubdivisionFactor(int elementIndex) const ;
                           
                            void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
                           
                           /**
                            * Generated
                            */
                            int getGhostLayerWidth() const ;
                           
                           /**
                            * Generated
                            */
                            void setGhostLayerWidth(const int& ghostLayerWidth) ;
                           
                           /**
                            * Generated
                            */
                            int getUnknownsPerSubcell() const ;
                           
                           /**
                            * Generated
                            */
                            void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
                           
                           /**
                            * Generated
                            */
                            int getAuxiliarFieldsPerSubcell() const ;
                           
                           /**
                            * Generated
                            */
                            void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
                           
                           /**
                            * Generated
                            */
                            int getLevel() const ;
                           
                           /**
                            * Generated
                            */
                            void setLevel(const int& level) ;
                           
                           /**
                            * Generated
                            */
                            bool getIsVirtual() const ;
                           
                           /**
                            * Generated
                            */
                            void setIsVirtual(const bool& isVirtual) ;
                           
                           /**
                            * Generated
                            */
                            int getNumberOfPatchStateUpdates() const ;
                           
                           /**
                            * Generated
                            */
                            void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
                           
                            tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                           
                            void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                           
                            double getPosition(int elementIndex) const ;
                           
                            void setPosition(int elementIndex, const double& position) ;
                           
                            tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                           
                            void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                           
                            double getSize(int elementIndex) const ;
                           
                            void setSize(int elementIndex, const double& size) ;
                           
                           /**
                            * Generated
                            */
                            double getTime() const ;
                           
                           /**
                            * Generated
                            */
                            void setTime(const double& time) ;
                           
                           /**
                            * Generated
                            */
                            double getTimestepSize() const ;
                           
                           /**
                            * Generated
                            */
                            void setTimestepSize(const double& timestepSize) ;
                           
                           /**
                            * Generated
                            */
                            double getMaximumFineGridTime() const ;
                           
                           /**
                            * Generated
                            */
                            void setMaximumFineGridTime(const double& maximumFineGridTime) ;
                           
                           /**
                            * Generated
                            */
                            double getMinimumFineGridTimestep() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
                           
                           /**
                            * Generated
                            */
                            bool getSynchronizeFineGrids() const ;
                           
                           /**
                            * Generated
                            */
                            void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
                           
                           /**
                            * Generated
                            */
                            bool getWillCoarsen() const ;
                           
                           /**
                            * Generated
                            */
                            void setWillCoarsen(const bool& willCoarsen) ;
                           
                           /**
                            * Generated
                            */
                            double getMinimalNeighborTimeConstraint() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
                           
                           /**
                            * Generated
                            */
                            int getConstrainingNeighborIndex() const ;
                           
                           /**
                            * Generated
                            */
                            void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
                           
                           /**
                            * Generated
                            */
                            double getMinimalLeafNeighborTimeConstraint() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
                           
                           /**
                            * Generated
                            */
                            double getMinimalNeighborTime() const ;
                           
                           /**
                            * Generated
                            */
                            void setMinimalNeighborTime(const double& minimalNeighborTime) ;
                           
                           /**
                            * Generated
                            */
                            double getMaximalNeighborTimestep() const ;
                           
                           /**
                            * Generated
                            */
                            void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
                           
                           /**
                            * Generated
                            */
                            double getEstimatedNextTimestepSize() const ;
                           
                           /**
                            * Generated
                            */
                            void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
                           
                           /**
                            * Generated
                            */
                            int getSkipGridIterations() const ;
                           
                           /**
                            * Generated
                            */
                            void setSkipGridIterations(const int& skipGridIterations) ;
                           
                           /**
                            * Generated
                            */
                            int getAgeInGridIterations() const ;
                           
                           /**
                            * Generated
                            */
                            void setAgeInGridIterations(const int& ageInGridIterations) ;
                           
                           /**
                            * Generated
                            */
                            double getDemandedMeshWidth() const ;
                           
                           /**
                            * Generated
                            */
                            void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                           
                            tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
                           
                            void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
                           
                            double getRestrictionLowerBounds(int elementIndex) const ;
                           
                            void setRestrictionLowerBounds(int elementIndex, const double& restrictionLowerBounds) ;
                           
                            tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
                           
                            void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
                           
                            double getRestrictionUpperBounds(int elementIndex) const ;
                           
                            void setRestrictionUpperBounds(int elementIndex, const double& restrictionUpperBounds) ;
                           
                           /**
                            * Generated
                            */
                            int getCellDescriptionIndex() const ;
                           
                           /**
                            * Generated
                            */
                            void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                           
                           /**
                            * Generated
                            */
                            int getUOldIndex() const ;
                           
                           /**
                            * Generated
                            */
                            void setUOldIndex(const int& uOldIndex) ;
                           
                           /**
                            * Generated
                            */
                            int getUNewIndex() const ;
                           
                           /**
                            * Generated
                            */
                            void setUNewIndex(const int& uNewIndex) ;
                           
                           /**
                            * Generated
                            */
                            int getAuxIndex() const ;
                           
                           /**
                            * Generated
                            */
                            void setAuxIndex(const int& auxIndex) ;
                           
                           /**
                            * Generated
                            */
                           std::string toString() const;
                           
                           /**
                            * Generated
                            */
                           void toString(std::ostream& out) const;
                           
                           
                           PersistentRecords getPersistentRecords() const;
                           /**
                            * Generated
                            */
                           CellDescriptionPacked convert() const;
                           
                           
                        #ifdef Parallel
                           protected:
                              static tarch::logging::Log _log;
                              
                           public:
                              
                              /**
                               * Global that represents the mpi datatype.
                               * There are two variants: Datatype identifies only those attributes marked with
                               * parallelise. FullDatatype instead identifies the whole record with all fields.
                               */
                              static MPI_Datatype Datatype;
                              static MPI_Datatype FullDatatype;
                              
                              /**
                               * Initializes the data type for the mpi operations. Has to be called
                               * before the very first send or receive operation is called.
                               */
                              static void initDatatype();
                              
                              static void shutdownDatatype();
                              
                              void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                              
                              #endif
                                 
                              };
                              
                              /**
                               * @author This class is generated by DaStGen
                               * 		   DataStructureGenerator (DaStGen)
                               * 		   2007-2009 Wolfgang Eckhardt
                               * 		   2012      Tobias Weinzierl
                               *
                               * 		   build date: 12-04-2013 09:18
                               *
                               * @date   31/07/2013 16:41
                               */
                              class peanoclaw::records::CellDescriptionPacked { 
                                 
                                 public:
                                    
                                    struct PersistentRecords {
                                       tarch::la::Vector<DIMENSIONS,int> _subdivisionFactor;
                                       int _ghostLayerWidth;
                                       int _unknownsPerSubcell;
                                       int _auxiliarFieldsPerSubcell;
                                       int _level;
                                       bool _isVirtual;
                                       int _numberOfPatchStateUpdates;
                                       tarch::la::Vector<DIMENSIONS,double> _position;
                                       tarch::la::Vector<DIMENSIONS,double> _size;
                                       double _time;
                                       double _timestepSize;
                                       double _maximumFineGridTime;
                                       double _minimumFineGridTimestep;
                                       bool _synchronizeFineGrids;
                                       bool _willCoarsen;
                                       double _minimalNeighborTimeConstraint;
                                       int _constrainingNeighborIndex;
                                       double _minimalLeafNeighborTimeConstraint;
                                       double _minimalNeighborTime;
                                       double _maximalNeighborTimestep;
                                       double _estimatedNextTimestepSize;
                                       int _skipGridIterations;
                                       int _ageInGridIterations;
                                       double _demandedMeshWidth;
                                       tarch::la::Vector<DIMENSIONS,double> _restrictionLowerBounds;
                                       tarch::la::Vector<DIMENSIONS,double> _restrictionUpperBounds;
                                       int _cellDescriptionIndex;
                                       int _uOldIndex;
                                       int _uNewIndex;
                                       int _auxIndex;
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords();
                                       
                                       /**
                                        * Generated
                                        */
                                       PersistentRecords(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
                                       
                                        tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                                       
                                        void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getGhostLayerWidth() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setGhostLayerWidth(const int& ghostLayerWidth) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getUnknownsPerSubcell() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getAuxiliarFieldsPerSubcell() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getLevel() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setLevel(const int& level) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        bool getIsVirtual() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setIsVirtual(const bool& isVirtual) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getNumberOfPatchStateUpdates() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                                       
                                        void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                                       
                                        void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getTime() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setTime(const double& time) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getTimestepSize() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setTimestepSize(const double& timestepSize) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getMaximumFineGridTime() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setMaximumFineGridTime(const double& maximumFineGridTime) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getMinimumFineGridTimestep() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        bool getSynchronizeFineGrids() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        bool getWillCoarsen() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setWillCoarsen(const bool& willCoarsen) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getMinimalNeighborTimeConstraint() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getConstrainingNeighborIndex() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getMinimalLeafNeighborTimeConstraint() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getMinimalNeighborTime() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setMinimalNeighborTime(const double& minimalNeighborTime) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getMaximalNeighborTimestep() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getEstimatedNextTimestepSize() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getSkipGridIterations() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setSkipGridIterations(const int& skipGridIterations) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getAgeInGridIterations() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setAgeInGridIterations(const int& ageInGridIterations) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        double getDemandedMeshWidth() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
                                       
                                        void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
                                       
                                        tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
                                       
                                        void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getCellDescriptionIndex() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getUOldIndex() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setUOldIndex(const int& uOldIndex) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getUNewIndex() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setUNewIndex(const int& uNewIndex) ;
                                       
                                       /**
                                        * Generated
                                        */
                                        int getAuxIndex() const ;
                                       
                                       /**
                                        * Generated
                                        */
                                        void setAuxIndex(const int& auxIndex) ;
                                       
                                       
                                    };
                                    
                                 private: 
                                    PersistentRecords _persistentRecords;
                                    
                                 public:
                                    /**
                                     * Generated
                                     */
                                    CellDescriptionPacked();
                                    
                                    /**
                                     * Generated
                                     */
                                    CellDescriptionPacked(const PersistentRecords& persistentRecords);
                                    
                                    /**
                                     * Generated
                                     */
                                    CellDescriptionPacked(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor, const int& ghostLayerWidth, const int& unknownsPerSubcell, const int& auxiliarFieldsPerSubcell, const int& level, const bool& isVirtual, const int& numberOfPatchStateUpdates, const tarch::la::Vector<DIMENSIONS,double>& position, const tarch::la::Vector<DIMENSIONS,double>& size, const double& time, const double& timestepSize, const double& maximumFineGridTime, const double& minimumFineGridTimestep, const bool& synchronizeFineGrids, const bool& willCoarsen, const double& minimalNeighborTimeConstraint, const int& constrainingNeighborIndex, const double& minimalLeafNeighborTimeConstraint, const double& minimalNeighborTime, const double& maximalNeighborTimestep, const double& estimatedNextTimestepSize, const int& skipGridIterations, const int& ageInGridIterations, const double& demandedMeshWidth, const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds, const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds, const int& cellDescriptionIndex, const int& uOldIndex, const int& uNewIndex, const int& auxIndex);
                                    
                                    /**
                                     * Generated
                                     */
                                    ~CellDescriptionPacked();
                                    
                                     tarch::la::Vector<DIMENSIONS,int> getSubdivisionFactor() const ;
                                    
                                     void setSubdivisionFactor(const tarch::la::Vector<DIMENSIONS,int>& subdivisionFactor) ;
                                    
                                     int getSubdivisionFactor(int elementIndex) const ;
                                    
                                     void setSubdivisionFactor(int elementIndex, const int& subdivisionFactor) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getGhostLayerWidth() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setGhostLayerWidth(const int& ghostLayerWidth) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getUnknownsPerSubcell() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setUnknownsPerSubcell(const int& unknownsPerSubcell) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getAuxiliarFieldsPerSubcell() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setAuxiliarFieldsPerSubcell(const int& auxiliarFieldsPerSubcell) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getLevel() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setLevel(const int& level) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getIsVirtual() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setIsVirtual(const bool& isVirtual) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getNumberOfPatchStateUpdates() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setNumberOfPatchStateUpdates(const int& numberOfPatchStateUpdates) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,double> getPosition() const ;
                                    
                                     void setPosition(const tarch::la::Vector<DIMENSIONS,double>& position) ;
                                    
                                     double getPosition(int elementIndex) const ;
                                    
                                     void setPosition(int elementIndex, const double& position) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,double> getSize() const ;
                                    
                                     void setSize(const tarch::la::Vector<DIMENSIONS,double>& size) ;
                                    
                                     double getSize(int elementIndex) const ;
                                    
                                     void setSize(int elementIndex, const double& size) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getTime() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setTime(const double& time) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getTimestepSize() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setTimestepSize(const double& timestepSize) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMaximumFineGridTime() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMaximumFineGridTime(const double& maximumFineGridTime) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMinimumFineGridTimestep() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMinimumFineGridTimestep(const double& minimumFineGridTimestep) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getSynchronizeFineGrids() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setSynchronizeFineGrids(const bool& synchronizeFineGrids) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     bool getWillCoarsen() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setWillCoarsen(const bool& willCoarsen) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMinimalNeighborTimeConstraint() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMinimalNeighborTimeConstraint(const double& minimalNeighborTimeConstraint) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getConstrainingNeighborIndex() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setConstrainingNeighborIndex(const int& constrainingNeighborIndex) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMinimalLeafNeighborTimeConstraint() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMinimalLeafNeighborTimeConstraint(const double& minimalLeafNeighborTimeConstraint) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMinimalNeighborTime() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMinimalNeighborTime(const double& minimalNeighborTime) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getMaximalNeighborTimestep() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setMaximalNeighborTimestep(const double& maximalNeighborTimestep) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getEstimatedNextTimestepSize() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setEstimatedNextTimestepSize(const double& estimatedNextTimestepSize) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getSkipGridIterations() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setSkipGridIterations(const int& skipGridIterations) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getAgeInGridIterations() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setAgeInGridIterations(const int& ageInGridIterations) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     double getDemandedMeshWidth() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setDemandedMeshWidth(const double& demandedMeshWidth) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,double> getRestrictionLowerBounds() const ;
                                    
                                     void setRestrictionLowerBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionLowerBounds) ;
                                    
                                     double getRestrictionLowerBounds(int elementIndex) const ;
                                    
                                     void setRestrictionLowerBounds(int elementIndex, const double& restrictionLowerBounds) ;
                                    
                                     tarch::la::Vector<DIMENSIONS,double> getRestrictionUpperBounds() const ;
                                    
                                     void setRestrictionUpperBounds(const tarch::la::Vector<DIMENSIONS,double>& restrictionUpperBounds) ;
                                    
                                     double getRestrictionUpperBounds(int elementIndex) const ;
                                    
                                     void setRestrictionUpperBounds(int elementIndex, const double& restrictionUpperBounds) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getCellDescriptionIndex() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setCellDescriptionIndex(const int& cellDescriptionIndex) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getUOldIndex() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setUOldIndex(const int& uOldIndex) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getUNewIndex() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setUNewIndex(const int& uNewIndex) ;
                                    
                                    /**
                                     * Generated
                                     */
                                     int getAuxIndex() const ;
                                    
                                    /**
                                     * Generated
                                     */
                                     void setAuxIndex(const int& auxIndex) ;
                                    
                                    /**
                                     * Generated
                                     */
                                    std::string toString() const;
                                    
                                    /**
                                     * Generated
                                     */
                                    void toString(std::ostream& out) const;
                                    
                                    
                                    PersistentRecords getPersistentRecords() const;
                                    /**
                                     * Generated
                                     */
                                    CellDescription convert() const;
                                    
                                    
                                 #ifdef Parallel
                                    protected:
                                       static tarch::logging::Log _log;
                                       
                                    public:
                                       
                                       /**
                                        * Global that represents the mpi datatype.
                                        * There are two variants: Datatype identifies only those attributes marked with
                                        * parallelise. FullDatatype instead identifies the whole record with all fields.
                                        */
                                       static MPI_Datatype Datatype;
                                       static MPI_Datatype FullDatatype;
                                       
                                       /**
                                        * Initializes the data type for the mpi operations. Has to be called
                                        * before the very first send or receive operation is called.
                                        */
                                       static void initDatatype();
                                       
                                       static void shutdownDatatype();
                                       
                                       void send(int destination, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       void receive(int source, int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       static bool isMessageInQueue(int tag, bool exchangeOnlyAttributesMarkedWithParallelise);
                                       
                                       #endif
                                          
                                       };
                                       
                                       
                                    
                                 #endif
                                 
                                 #endif
                                 
